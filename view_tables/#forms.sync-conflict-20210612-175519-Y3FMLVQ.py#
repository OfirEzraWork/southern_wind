from django import forms

from django.forms import ModelForm
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext_lazy as _
from view_tables.models import Adventure

import datetime


class registerToAdventureForm(forms.Form):
    player = forms.CharField(help_text="What is your name?")
    #getting all adventures

    for a in Adventure.objects.all():
        print (dir(a))
    choices = ((a.pk,a.title) for a in Adventure.objects.all())

    
    adventure = forms.ChoiceField(help_text="Which adventure do you want to play?",choices =choices)

    def clean_player(self):
        data = self.cleaned_data['player']

        #check if player name is not empty
        if data.strip() == '':
            raise ValidationError(_('Plesae provide a player name'))

        return data

class CreateTableForm(ModelForm):
    class Meta:
        model = Advneture
        fields = ['title',
                  'dm_name',
                  'tea


class createATable(forms.Form):
    title = forms.CharField(max_length=200,help_text='Please enter the adventure\'s title')
    dm_name = forms.CharField(max_length=200,help_text='Please enter your name or a display name')
    teaser = forms.CharField(max_length=2000,help_text='Please enter the teaser for the adventure (minimum 200 characters)')
    is_dnd5 = forms.BooleanField(help_text='Is this a D&D5 adventure?',initial=1)
    min_level = forms.IntegerField(help_text='What is the minimum character level for this adventure?')
    max_level = forms.IntegerField(help_text='What is the maximum character level for this adventure?')
    max_number_of_players = forms.IntegerField(help_text='Total numbers of players you are willing to host',initial=5)    
    date = forms.DateField()

    def clean(self):
        _title = self.cleaned_data['title']
        if _title.strip() == '':
            raise ValidationError(_('Please provide a title to the adventure'))
        
        _dm_name = self.cleaned_data['dm_name']
        if _dm_name.strip() == '':
            raise ValidationError(_('Please insert a DM display name'))

        _teaser = self.cleanded_data['teaser']
        if _teaser.strip() == '':
            raise ValidationError(_('Please add a teaser'))

        _is_dnd5 = self.cleaned_data('is_dnd5')
        _min_level = self.cleaned_data('min_level')
        _max_level = self.cleaned_data('max_level')
        if _is_dnd5 == True:
            if _min_level.strip() == '' or _max_level.strip() == '':
                raise ValidationError(_('D&D5 tables require minimum and maximum level level'))

            if int(_min_level) > int(max_level):
                raise ValidationError(_('Minumum character level has to be equal or smaller than maximum character level'))

        _data = self.cleaned_data['date']
        if _data < datetime.today():
            raise ValidationError(_('Please update the date of the adventure to be in the future'))


        
        
            
